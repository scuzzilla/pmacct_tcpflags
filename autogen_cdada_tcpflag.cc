/*****************************************************************************/
/*                      BEGIN libcdada AUTOGENERATED C++ file                */
/*****************************************************************************/
// File autogenerated from cmd: ['/home/toto/Projects/libcdada/tools/cdada-gen', 'list:tcpflag', '-o', '/home/toto/Projects/pmacct_tcpflags/autogen_cdada_tcpflag.cc']
// Add your header includes for types {'tcpflag'} here

#include "cdada_types/tcpflag.h"

///////////////////////////////////////////////////////////////////////////////
///                       DO NOT MODIFY AFTER THIS LINE                     ///
///////////////////////////////////////////////////////////////////////////////

#include <string.h>
#include <cdada/list_custom_cc.h>
#include <cdada/map_custom_cc.h>
#include <cdada/queue_custom_cc.h>
#include <cdada/set_custom_cc.h>
#include <cdada/stack_custom_cc.h>

//C++ comparison operators for user stypes (memcmp)

inline bool operator<(const tcpflag & a1, const tcpflag & a2){
    return memcmp((const void*)&a1, (const void*)&a2,
                                        sizeof( tcpflag )) < 0;
}
inline bool operator==(const tcpflag & a1, const tcpflag & a2){
    return memcmp((const void*)&a1, (const void*)&a2,
                                        sizeof( tcpflag )) == 0;
}

//Cdata wrappers

//BEGIN list for tcpflag (std::list<tcpflag>)


//Operator
void __cdada_list_autogen_create_tcpflag (void* m){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	s->list.custom = (void*)new std::list<tcpflag>();
}
void __cdada_list_autogen_destroy_tcpflag (void* m){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	delete p;
}
void __cdada_list_autogen_clear_tcpflag (void* m){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	p->clear();
}
bool __cdada_list_autogen_empty_tcpflag (const void* m){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return p->empty();
}
uint32_t __cdada_list_autogen_size_tcpflag (const void* m){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return p->size();
}
int __cdada_list_autogen_insert_tcpflag (void* m, const void* val,
						const uint32_t pos){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return cdada_list_insert_u<tcpflag> (s, p, val, pos);
}
int __cdada_list_autogen_get_tcpflag (const void* m, const uint32_t pos,
						void* val){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return cdada_list_get_u<tcpflag> (s, p, pos, val);
}
int __cdada_list_autogen_first_last_tcpflag (const void* m, bool first,
						void* key){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return cdada_list_first_last_u<tcpflag> (s, p, first, key);
}
int __cdada_list_autogen_erase_tcpflag (void* m, const uint32_t pos){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return cdada_list_erase_u<tcpflag> (s, p, pos);
}
int __cdada_list_autogen_remove_tcpflag (void* m, const void* val){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return cdada_list_remove_u<tcpflag> (s, p, val);
}
int __cdada_list_autogen_push_tcpflag (void* m, const void* val,
							bool front){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return cdada_list_push_u<tcpflag> (s, p, val, front);
}
int __cdada_list_autogen_pop_tcpflag (void* m, bool front){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return cdada_list_pop_u<tcpflag> (s, p, front);
}
void __cdada_list_autogen_sort_tcpflag (void* m){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	p->sort();
}
void __cdada_list_autogen_reverse_tcpflag (void* m){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	p->reverse();
}
void __cdada_list_autogen_unique_tcpflag (void* m){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	p->unique();
}
void __cdada_list_autogen_traverse_tcpflag (const void* m,
						cdada_list_it f,
						void* opaque){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return cdada_list_traverse_u<tcpflag> (s, p, f, opaque);
}
void __cdada_list_autogen_rtraverse_tcpflag (const void* m,
						cdada_list_it f,
						void* opaque){
	__cdada_list_int_t* s = (__cdada_list_int_t*)m;
	std::list<tcpflag>* p =
			(std::list<tcpflag>*)s->list.custom;
	return cdada_list_rtraverse_u<tcpflag> (s, p, f, opaque);
}
void __cdada_list_autogen_dump_tcpflag (const void* m,
                                                std::stringstream& ss){
        __cdada_list_int_t* s = (__cdada_list_int_t*)m;
        std::list<tcpflag>* p =
                        (std::list<tcpflag>*)s->list.custom;
        return cdada_list_dump_u< tcpflag > (s, p, ss);
}
__cdada_list_ops_t __cdada_list_autogen_tcpflag = {
	__cdada_list_autogen_create_tcpflag,
	__cdada_list_autogen_destroy_tcpflag,
	__cdada_list_autogen_clear_tcpflag,
	__cdada_list_autogen_empty_tcpflag,
	__cdada_list_autogen_size_tcpflag,
	__cdada_list_autogen_insert_tcpflag,
	__cdada_list_autogen_get_tcpflag,
	__cdada_list_autogen_first_last_tcpflag,
	__cdada_list_autogen_erase_tcpflag,
	__cdada_list_autogen_remove_tcpflag,
	__cdada_list_autogen_push_tcpflag,
	__cdada_list_autogen_pop_tcpflag,
	__cdada_list_autogen_sort_tcpflag,
	__cdada_list_autogen_reverse_tcpflag,
	__cdada_list_autogen_unique_tcpflag,
	__cdada_list_autogen_traverse_tcpflag,
	__cdada_list_autogen_rtraverse_tcpflag,
	__cdada_list_autogen_dump_tcpflag,
};

//END list for tcpflag (std::list<tcpflag>)

/*****************************************************************************/
/*                       END libcdada AUTOGENERATED C++ file                 */
/*****************************************************************************/
